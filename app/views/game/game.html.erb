<!DOCTYPE html>
<html lang="en">
<title>Inscription intérim</title>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Lato">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
body,h1,h2,h3,h4,h5,h6 {font-family: "Lato", sans-serif}
.w3-bar,h1,button {font-family: "Montserrat", sans-serif}
.fa-anchor,.fa-coffee {font-size:200px}
</style>
<body>
<head>
    <meta charset="utf-8" />
    <title>Salle d&apos;attente</title>
    <style>canvas { display: block; margin: 0 auto; }</style>
    <script src="http://code.jquery.com/jquery-1.11.0.min.js"></script>
</head>
<body>
  <!-- Casse brique -->
  <div id='div_caseBrike'>
    <div class="w3-container w3-grey w3-center" style="padding:128px 16px">
        <h1 class="w3-margin w3-jumbo">Casse-briques</h1>
        <p class="w3-xlarge">Bienvenue dans Casse-briques! Le but est simple, casse les brisques et fait le meilleur score ! Fait gaffe de ne pas laisser la balle s échappez.</p>
        <p class="w3-xlarge">Utilise les flèche du clavier pour bouger ou maintient la souris.</p>
        <input class="w3-button w3-black w3-padding-large w3-large w3-margin-top" id="StartButton" type="button" value="Start"/>
        <input style="display: none; width: 100px; margin-left: auto; margin-right: auto;" class="w3-button w3-padding-large w3-large w3-margin-top" id="StopButton" type="button" value="Passer"/>
    </div>
    <div >
      <style>canvas { display: block; margin: 0 auto; }</style>
      <canvas style="display: none;" id="myCanvas_CasseBrike"  width="480" height="320"></canvas>
    </div>
  </div>
    <!-- ------------------- -->

  <!-- LABYRINTHE -->
  <div id='div_labyrinthe' style="display: none;">
    <h1 style='margin: 0px;text-align: center;font-style: italic;color: maroon;'>L a b y r i n t h e</h1> 
    <input  id="bt_Start_laby" type="button" onclick="Jeu.init()" class="w3-button w3-black w3-padding-large w3-large w3-margin-top" style=" text-align: center;position: absolute; right: 48%;" value='Start' />
    <div id='div__afStart_LABYRINTHE' style="display: none;">
      <div class="controle">
        <input class="w3-button w3-black w3-padding-large w3-large w3-margin-top" style=" text-align: center;right: 48%;" id="StopButton" type="button" value="Passer"/>
      </div>
      <div id="jeu"></div>
      <div class="controle">
        <img src="plus.png" onclick="Jeu.clicPlus()" alt="" />
        <img src="avancer.png" onclick="Jeu.clicAvancer()" alt="" />
        <img src="moins.png" onclick="Jeu.clicMoins()" alt="" /> 
      </div>
    </div>
  </div>
<!-- ------------------- -->

    <script>  
      var PATIENCE = 0;
      var VOLONTE = 0;
      var PRECITION = 0;
      var SOLITAIRE = 0;
      var ORDONNE = 0;
      var LOGIQUE = 0;


      var NumGame = 0;
    //NumGame: 0 -> No game
    //NumGame: 1 -> CasseBrick
    //NumGame: 2 -> div_labyrinthe

    $("#StopButton").click(function () {
      passe();
    });

    function nextGame()
    {
      if(NumGame==1)
      {
        document.getElementById("div_caseBrike").style.display = "none";
        document.getElementById("div_labyrinthe").style.display = "block";
        NumGame=2;
        jeu.init();
        
      }else if(NumGame==2)
      {

      }

    }

    function passe()
    {
      if(NumGame==1)
      {
        started_CasseBrick = false;
        PATIANCE -= 5;
        VOLONTE -= 3;
        PRECITION -= 3;
        SOLITAIRE -= 0;
        ORDONNE -= 0;
        LOGIQUE -= 1;

        nextGame()
        
      }else if(NumGame==2)
      {

      }

    }
//Casse brique-------------------------------------------------------------------
    var started_CasseBrick = false;
    $("#StartButton").click(function () {
      NumGame=1;
      document.getElementById("StopButton").style.display = "block";
        $("#SplashScreen").hide();
        $("#myCanvas_CasseBrike").show();
        $("#StartButton").hide();
        started_CasseBrick = true;
        draw_CasseBrik()
    });
    var canvas = document.getElementById("myCanvas_CasseBrike");
    var ctx = canvas.getContext("2d");
    var ballRadius = 10;
    var x = canvas.width/2;
    var y = canvas.height-30;
    var dx = 2;
    var dy = -2;
    var paddleHeight = 10;
    var paddleWidth = 75;
    var paddleX = (canvas.width-paddleWidth)/2;
    var rightPressed = false;
    var leftPressed = false;
    var brickRowCount = 5;
    var brickColumnCount = 3;
    var brickWidth = 75;
    var brickHeight = 20;
    var brickPadding = 10;
    var brickOffsetTop = 30;
    var brickOffsetLeft = 30;
    var score = 0;
    var lives = 1;
    var bricks = [];
    for(var c=0; c<brickColumnCount; c++) {
      bricks[c] = [];
      for(var r=0; r<brickRowCount; r++) {
        bricks[c][r] = { x: 0, y: 0, status: 1 };
      }
    }
      document.addEventListener("keydown", keyDownHandler, false);
      document.addEventListener("keyup", keyUpHandler, false);
      document.addEventListener("mousemove", mouseMoveHandler, false);

      function keyDownHandler(e) {
        if(e.keyCode == 39) {
          rightPressed = true;
        }
        else if(e.keyCode == 37) {
          leftPressed = true;
        }
      }
      function keyUpHandler(e) {
        if(e.keyCode == 39) {
          rightPressed = false;
        }
        else if(e.keyCode == 37) {
          leftPressed = false;
        }
      }
      function mouseMoveHandler(e) {
        var relativeX = e.clientX - canvas.offsetLeft;
        if(relativeX > 0 && relativeX < canvas.width) {
          paddleX = relativeX - paddleWidth/2;
        }
      }
      function collisionDetection() {
        for(var c=0; c<brickColumnCount; c++) {
          for(var r=0; r<brickRowCount; r++) {
            var b = bricks[c][r];
            if(b.status == 1) {
              if(x > b.x && x < b.x+brickWidth && y > b.y && y < b.y+brickHeight) {
                dy = -dy;
                b.status = 0;
                score++;
                if(score == brickRowCount*brickColumnCount) {

                  PATIANCE += 5;
                  VOLONTE += 3;
                  PRECITION += 3;
                  SOLITAIRE += 0;
                  ORDONNE += 0;
                  LOGIQUE += 0;
                  nextGame()
                }
              }
            }
          }
        }
      }

      function drawBall() {
        ctx.beginPath();
        ctx.arc(x, y, ballRadius, 0, Math.PI*2);
        ctx.fillStyle = "#04B404";
        ctx.fill();
        ctx.closePath();
      }
      function drawPaddle() {
        ctx.beginPath();
        ctx.rect(paddleX, canvas.height-paddleHeight, paddleWidth, paddleHeight);
        ctx.fillStyle = "#04B404";
        ctx.fill();
        ctx.closePath();
      }
      function drawBricks() {
        for(var c=0; c<brickColumnCount; c++) {
          for(var r=0; r<brickRowCount; r++) {
            if(bricks[c][r].status == 1) {
              var brickX = (r*(brickWidth+brickPadding))+brickOffsetLeft;
              var brickY = (c*(brickHeight+brickPadding))+brickOffsetTop;
              bricks[c][r].x = brickX;
              bricks[c][r].y = brickY;
              ctx.beginPath();
              ctx.rect(brickX, brickY, brickWidth, brickHeight);
              ctx.fillStyle = "#04B404";
              ctx.fill();
              ctx.closePath();
            }
          }
        }
      }
      function drawScore() {
        ctx.font = "16px Arial";
        ctx.fillStyle = "#FFFFFF";
        ctx.fillText("Score: "+score, 8, 20);
      }
      function drawLives() {
        ctx.font = "16px Arial";
        ctx.fillStyle = "#FFFFFF";
        ctx.fillText("Lives: "+lives, canvas.width-65, 20);
      }

      function draw_CasseBrik() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        drawBricks();
        drawBall();
        drawPaddle();
        drawScore();
        drawLives();
        collisionDetection();
       
        if(x + dx > canvas.width-ballRadius || x + dx < ballRadius) {
          dx = -dx;
        }
        if(y + dy < ballRadius) {
          dy = -dy;
        }
        else if(y + dy > canvas.height-ballRadius) {
          if(x > paddleX && x < paddleX + paddleWidth) {
            dy = -dy;
          }
          else {
            lives--;
            if(!lives) {

              PATIANCE += 2;
              VOLONTE += 1;
              PRECITION += 1;
              SOLITAIRE += 0;
              ORDONNE += 0;
              LOGIQUE += 0;
              nextGame()
            }
            else {
              x = canvas.width/2;
              y = canvas.height-30;
              dx = 1;
              dy = 1;
              paddleX = (canvas.width-paddleWidth)/2;
            }
          }
        }

        if(rightPressed && paddleX < canvas.width-paddleWidth) {
          paddleX += 7;
        }
        else if(leftPressed && paddleX > 0) {
          paddleX -= 7;
        }

        x += dx;
        y += dy;
        if(started_CasseBrick)
          requestAnimationFrame(draw_CasseBrik);
      }
//Casse brique-------------------------------------------------------------------
    </script>

<script>
    /* LABYRINTHE =================================================================================================================================
    ===============================================================================================================================================
    ===============================================================================================================================================
    ===============================================================================================================================================
    ===============================================================================================================================================
    ===============================================================================================================================================
    ===============================================================================================================================================
    ===============================================================================================================================================
    ===============================================================================================================================================
    ===============================================================================================================================================
    ===============================================================================================================================================
    */
  
  //================== Kz ==================
  function Kz(li, co, zn) {
    this.li = li;
    this.co = co;
    this.zn = zn;
    this.murN = li === 0;
    this.murW = co === 0;
    this.entree = false;
    this.sortie = false;
    this.direction = -1;
    this.voisin = [null, null, null, null];
  }
  
  Kz.ENWS = [">", "^", "<", "v", "•", "◊", "O", "X"];
  Kz.ENWS = ["→", "↑", "←", "↓", "•", "◊", "O", "X"];
  Kz.Vide = -1;
  Kz.E = 0;
  Kz.N = 1;
  Kz.W = 2;
  Kz.S = 3;
  Kz.Point = 4;
  Kz.Diamant = 5;
  Kz.O = 6;
  Kz.X = 7;
  
  //============= Kz.marque =============
  Kz.prototype.marque = function () {
    return this.direction > Kz.Vide && this.direction < Kz.ENWS.length ? Kz.ENWS[this.direction] : "";
  };
  
  //============= Kz.toString =============
  Kz.prototype.toString = function () {
    return "Kz" + (this.entree ? "E" : "") + (this.sortie ? "S" : "") + (this.murN ? "N" : "") + (this.murW ? "W" : "") + "'" + this.marque() + "'(" + this.li + "," + this.co + ")";
  };
  
  //============= Kz.classe =============
  Kz.prototype.classe = function () {
    return "kz" + (this.entree ? " entree" : "") + (this.sortie ? " sortie" : "") + (this.murN ? " murN" : "") + (this.murW ? " murW" : "") + (this.li === this.zn.li - 1 ? " murS" : "") + (this.co === this.zn.co - 1 ? " murE" : "");
  };
  
  //============= Kz.rafraichir =============
  Kz.prototype.rafraichir = function () {
    this.widget.className = this.classe();
    this.widget.innerHTML = this.marque();
  };
  
  //============= Kz.verifierDirection =============
  Kz.prototype.verifierDirection = function (dd) {
    if (dd < 0 || dd > 3) {
      throw new Error("Direction " + dd + " incorrecte");
    }
  };
  
  //============= Kz.marquer =============
  Kz.prototype.marquer = function (n) {
    if (n > Kz.X) {
      this.direction = -1;
    } else {
      this.direction = n;
    }
    this.rafraichir();
  };
  
  //============= Kz.tournerPlus =============
  Kz.prototype.tournerPlus = function () {
    this.direction = (this.direction + 1) % 4;
    this.rafraichir();
  };
  
  //============= Kz.tournerMoins =============
  Kz.prototype.tournerMoins = function () {
    this.direction = (this.direction + 3) % 4;
    this.rafraichir();
  };
  
  //============= Kz.estVide =============
  Kz.prototype.estVide = function () {
    return this.direction < 0;
  };
  
  //============= Kz.estVideVers =============
  Kz.prototype.estVideVers = function (dd) {
    this.verifierDirection(dd);
    if (this.voisin[dd]) {
      return this.voisin[dd].estVide();
    }
    return false;
  };
  
  //============= Kz.murVers =============
  Kz.prototype.murVers = function (dd) {
    this.verifierDirection(dd);
    switch (dd) {
    case 0: // Est
      if (this.voisin[0]) {
        return this.voisin[0].murW;
      }
      return true;
    case 1: // Nord
      return this.murN;
    case 2: // West
      return this.murW;
    case 3: // Sud
      if (this.voisin[3]) {
        return this.voisin[3].murN;
      }
      return true;
    }
  };
  
  //============= Kz.fermerMur =============
  Kz.prototype.fermerMur = function (dd) {
    this.verifierDirection(dd);
    switch (dd) {
    case 0: // Est
      if (this.voisin[0]) {
        this.voisin[0].murW = true;
        this.voisin[0].rafraichir();
      }
      break;
    case 1: // Nord
      this.murN = true;
      break;
    case 2: // West
      this.murW = true;
      break;
    case 3: // Sud
      if (this.voisin[3]) {
        this.voisin[3].murN = true;
        this.voisin[3].rafraichir();
      }
      break;
    }
    this.rafraichir();
  };
  
  //============= Kz.ouvrirMur =============
  Kz.prototype.ouvrirMur = function (dd) {
    this.verifierDirection(dd);
    switch (dd) {
    case 0: // Est
      if (this.voisin[0]) {
        this.voisin[0].murW = false;
        this.voisin[0].rafraichir();
      }
      break;
    case 1: // Nord
      if (this.li > 0) {
        this.murN = false;
      }
      break;
    case 2: // West
      if (this.co > 0) {
        this.murW = false;
      }
      break;
    case 3: // Sud
      if (this.voisin[3]) {
        this.voisin[3].murN = false;
        this.voisin[3].rafraichir();
      }
      break;
    }
    this.rafraichir();
  };
  
  //================== Zone ==================
  function Zone(li, co) {
    var l, c, kz;
    this.li = li;
    this.co = co;
    this.liEntree = 0;
    this.coEntree = 0;
    this.liSortie = li - 1;
    this.coSortie = co - 1;
    this.liICI = 0;
    this.coICI = 0;
    this.grille = [];
    for (l = 0; l < li; l += 1) {
      this.grille[l] = [];
      for (c = 0; c < co; c += 1) {
        this.grille[l][c] = new Kz(l, c, this);
      }
    }
    this.grille[0][0].entree = true;
    this.grille[li - 1][co - 1].sortie = true;
    for (l = 0; l < li; l += 1) {
      for (c = 0; c < co; c += 1) {
        kz = this.grille[l][c];
        kz.voisin[0] = c + 1 === co ? null : this.grille[l][c + 1];
        kz.voisin[1] = l === 0 ? null : this.grille[l - 1][c];
        kz.voisin[2] = c === 0 ? null : this.grille[l][c - 1];
        kz.voisin[3] = l + 1 === li ? null : this.grille[l + 1][c];
      }
    }
  }
  
  //============= Zone.installerDans =============
  Zone.prototype.installerDans = function (pere) {
    var l, c, tr;
    var t = Jeu.unElementDe(pere, "table", {classe: "zone"});
    t.setAttribute("align", "center");
    t.setAttribute("cellspacing", "0");
    t = Jeu.unElementDe(t, "tbody", {});
    t.setAttribute("valign", "middle");
    for (l = 0; l < this.li; l += 1) {
      tr = Jeu.unElementDe(t, "tr", {});
      for (c = 0; c < this.co; c += 1) {
        this.grille[l][c].widget = Jeu.unElementDe(tr, "td", {html: this.grille[l][c].marque(), classe: this.grille[l][c].classe()});
      }
    }
  };
  
  //============= Zone.rafraichir =============
  Zone.prototype.rafraichir = function () {
    var l, c;
    for (l = 0; l < this.li; l += 1) {
      for (c = 0; c < this.co; c += 1) {
        this.grille[l][c].rafraichir();
      }
    }
  };
  
  //============= Zone.verifierCoordonnees =============
  Zone.prototype.verifierCoordonnees = function (ll, cc) {
    if (ll < 0 || cc < 0 || ll >= this.li || cc >= this.co) {
      throw new Error("Entrée (" + ll + "," + cc + ") Hors Zone");
    }
  };
  
  //============= Zone.creerLabyrinthe =============
  Zone.prototype.creerLabyrinthe = function (kz, av) {
    var k, d;
    var cav = [];
    for (k = 0; k < av.length; k += 1) {
      cav[k] = av[k];
    }
    kz.marquer(Kz.Point);
    while (cav.length > 0) {
      d = cav.pop();
      if (kz.estVideVers(d)) {
        kz.ouvrirMur(d);
        this.creerLabyrinthe(kz.voisin[d], Jeu.listeDansLeDesordre([0, 1, 2, 3]));
      }
    }
  };
  
  //============= Zone.sortieAtteinte =============
  Zone.prototype.sortieAtteinte = function () {
    return this.liICI === this.liSortie && this.coICI === this.coSortie;
  };
  
  //============= Zone.raz =============
  Zone.prototype.raz = function () {
    var l, c;
    for (l = 0; l < this.li; l += 1) {
      for (c = 0; c < this.co; c += 1) {
        this.grille[l][c].fermerMur(1);
        this.grille[l][c].fermerMur(2);
        this.grille[l][c].marquer(Kz.Vide);
      }
    }
    this.fixerEntree(0, 0);
    this.fixerSortie(this.li - 1, this.co - 1);
    var kz = this.grille[Jeu.entierZeroInf(this.li)][Jeu.entierZeroInf(this.co)];
    this.creerLabyrinthe(kz, Jeu.listeDansLeDesordre([0, 1, 2, 3]));
    for (l = 0; l < this.li; l += 1) {
      for (c = 0; c < this.co; c += 1) {
        this.grille[l][c].marquer(Kz.Vide);
      }
    }
    this.liICI = 0;
    this.coICI = 0;
    this.grille[0][0].marquer(Kz.E);
    this.rafraichir();
  };
  
  //============= Zone.allerVersSortie =============
  Zone.prototype.allerVersSortie = function () {
    var kz = this.grille[this.liICI][this.coICI];
    var d = kz.direction;
    if (kz.murVers((d + 3) % 4)) {
      if (kz.murVers(d)) {
        this.grille[this.liICI][this.coICI].tournerPlus();
      } else {
        kz.marquer(Kz.Vide);
        kz = kz.voisin[d];
        this.liICI = kz.li;
        this.coICI = kz.co;
        this.grille[this.liICI][this.coICI].marquer(d);
      }
    } else {
      kz.marquer(Kz.Vide);
      kz = kz.voisin[(d + 3) % 4];
      this.liICI = kz.li;
      this.coICI = kz.co;
      this.grille[this.liICI][this.coICI].marquer((d + 3) % 4);
    }
  };
  
  //============= Zone.onAvance =============
  Zone.prototype.onAvance = function () {
    var kz = this.grille[this.liICI][this.coICI];
    var d = kz.direction;
    if (kz.murVers(d)) {
      return false;
    } else {
      kz.marquer(Kz.Point);
      kz = kz.voisin[d];
      this.liICI = kz.li;
      this.coICI = kz.co;
      this.grille[this.liICI][this.coICI].marquer(d);
      return true;
    }
  };
  
  //============= Zone.onTournePlus =============
  Zone.prototype.onTournePlus = function () {
    this.grille[this.liICI][this.coICI].tournerPlus();
  };
  
  //============= Zone.onTourneMoins =============
  Zone.prototype.onTourneMoins = function () {
    this.grille[this.liICI][this.coICI].tournerMoins();
  };
  
  //============= Zone.fixerEntree =============
  Zone.prototype.fixerEntree = function (ll, cc) {
    this.verifierCoordonnees(ll, cc);
    if (ll === this.liSortie && cc >= this.coSortie) {
      throw new Error("Entrée et Sortie confondues (" + ll + "," + cc + ")");
    }
    this.grille[this.liEntree][this.coEntree].entree = false;
    this.grille[ll][cc].entree = true;
    this.liEntree = ll;
    this.coEntree = cc;
    this.rafraichir();
  };
  
  //============= Zone.fixerSortie =============
  Zone.prototype.fixerSortie = function (ll, cc) {
    this.verifierCoordonnees(ll, cc);
    if (ll === this.liEntree && cc >= this.coEntree) {
      throw new Error("Sortie et Entrée confondues (" + ll + "," + cc + ")");
    }
    this.grille[this.liSortie][this.coSortie].sortie = false;
    this.grille[ll][cc].sortie = true;
    this.liSortie = ll;
    this.coSortie = cc;
    this.rafraichir();
  };
  
  //============= Zone.marquer =============
  Zone.prototype.marquer = function (ll, cc, n) {
    this.verifierCoordonnees(ll, cc);
    this.grille[ll][cc].marquer(n);
  };
  
  //============= Zone.tournerPlus =============
  Zone.prototype.tournerPlus = function (ll, cc) {
    this.verifierCoordonnees(ll, cc);
    this.grille[ll][cc].tournerPlus();
  };
  
  //============= Zone.tournerMoins =============
  Zone.prototype.tournerMoins = function (ll, cc) {
    this.verifierCoordonnees(ll, cc);
    this.grille[ll][cc].tournerMoins();
  };
  
  //============= Zone.estVide =============
  Zone.prototype.estVide = function (ll, cc) {
    this.verifierCoordonnees(ll, cc);
    return this.grille[ll][cc].estVide();
  };
  
  //============= Zone.estVideVers =============
  Zone.prototype.estVideVers = function (ll, cc, dd) {
    this.verifierCoordonnees(ll, cc);
    return this.grille[ll][cc].estVideVers(dd);
  };
  
  //============= Zone.murVers =============
  Zone.prototype.murVers = function (ll, cc, dd) {
    this.verifierCoordonnees(ll, cc);
    return this.grille[ll][cc].murVers(dd);
  };
  
  //============= Zone.fermerMur =============
  Zone.prototype.fermerMur = function (ll, cc, dd) {
    this.verifierCoordonnees(ll, cc);
    this.grille[ll][cc].fermerMur(dd);
  };
  
  //============= Zone.ouvrirMur =============
  Zone.prototype.ouvrirMur = function (ll, cc, dd) {
    this.verifierCoordonnees(ll, cc);
    this.grille[ll][cc].ouvrirMur(dd);
  };
  /*globals document, setTimeout, Zone */
  
  var Jeu = {};
  
  // Dimension de la grille
  Jeu.li = 7;
  Jeu.co = 11;
  
  //================== Services ==================
  //================== Jeu.effacer ==================
  Jeu.effacer = function (pere) { // PUBLIC
    while (pere.firstChild) {
      pere.removeChild(pere.firstChild);
    }
  };
  
  //================== Jeu.unElementDe ==================
  Jeu.unElementDe = function (pere, tag, args) {
    // Crée un élément dans le pere et fixe certains attributs
    var element = document.createElement(tag);
    if (args.html) {
      element.innerHTML = args.html;
    }
    if (args.id) { 
      element.id = args.id;
    }
    if (args.classe) {
      element.className = args.classe;
    }
    if (args.image) {
      element.setAttribute("src", args.image);
      element.setAttribute("align", "middle");
    }
    if (args.onmouseover) {
      element.setAttribute("onmouseover", args.onmouseover);
    }
    if (args.onmouseout) {
      element.setAttribute("onmouseout", args.onmouseout);
    }
    if (args.onclick) {
      element.setAttribute("onclick", args.onclick);
    }
    if (args.href) {
      element.setAttribute("href", args.href);
    }
    pere.appendChild(element);
    return element;
  };
  
  //============= Jeu.entierZeroInf =============
  Jeu.entierZeroInf = function (n) {
    return  Math.floor(n * Math.random());
  };
  
  //================== Jeu.listeDansLeDesordre ==================
  Jeu.listeDansLeDesordre = function (original) {
    var k, x;
    var nombreDitems = original.length;
    var reponseDansLeDesordre = [];
    for (k = 0; k < nombreDitems; k += 1) {
      reponseDansLeDesordre[k] = null;
    }
    for (k = 0; k < nombreDitems; k += 1) {
      x = Math.floor(nombreDitems * Math.random());
      while (reponseDansLeDesordre[x] !== null) {
        x = Math.floor(nombreDitems * Math.random());
      }
      reponseDansLeDesordre[x] = original[k];
    }
    return reponseDansLeDesordre;
  };
  
  //================== Jeu.fondDeCouleur ==================
  Jeu.fondDeCouleur = function (c) {
    Jeu.dom_body.className = c;
  };
  
  //================== Jeu.debutDePartie ==================
  Jeu.debutDePartie = function () {
    Jeu.fondDeCouleur(null);
    Jeu.zone.raz();
  };
  
  //================== Jeu.finDePartie ==================
  Jeu.finDePartie = function () {
    Jeu.fondDeCouleur("vert");
  };
  
  //================== Jeu.avancerVersSortie ==================
  Jeu.avancerVersSortie = function () {
    Jeu.zone.allerVersSortie();
    if (Jeu.zone.sortieAtteinte()) {
      Jeu.finDePartie();
    } else {
      setTimeout(Jeu.avancerVersSortie, 100);
    }
  };
  
  //================== COontrôle Interface ==================
  
  //================== Jeu.clicControle ==================
  Jeu.clicControle = function () {
    Jeu.debutDePartie();
  };
  
  //================== Jeu.clicAvancer ==================
  Jeu.clicAvancer = function () {
    if (!Jeu.zone.onAvance()) {
      Jeu.fondDeCouleur("rouge");
      setTimeout(Jeu.fondDeCouleur, 500);
    }
    if (Jeu.zone.sortieAtteinte()) {
      Jeu.finDePartie();
    }
  };	
  
  //================== Jeu.clicPlus ==================
  Jeu.clicPlus = function () {
    Jeu.zone.onTournePlus();
  };
  
  //================== Jeu.clicMoins ==================
  Jeu.clicMoins = function () {
    Jeu.zone.onTourneMoins();
  };
  
  //================== Initialisation du Jeu ==================
  //================== Jeu.initJeu ==================
  Jeu.initJeu = function () {
    // ici définition du jeu et initialisation 
    Jeu.zone = new Zone(Jeu.li, Jeu.co);
    Jeu.zone.installerDans(Jeu.dom_jeu);
  };
  
  //================== Jeu.init ==================
  Jeu.init = function () {

    document.getElementById("div__afStart_LABYRINTHE").style.display = "block";
    document.getElementById("bt_Start_laby").style.display = "none";
    
    // le corps du document
    Jeu.dom_body = document.getElementsByTagName('body')[0];
    // zone d'affichage de l'aide (bouton aide au départ)
    Jeu.dom_btnAide = document.getElementById("btnAide");
    // zone d'affichage des informations (* au départ)
    Jeu.dom_aide = document.getElementById("aide");
    // zone de définition du jeu (vide au départ)
    Jeu.dom_jeu = document.getElementById("jeu");
    Jeu.initJeu();
    Jeu.debutDePartie();
  };
  
  </script>
  <style>
  
  #jeu {
    color: navy;
    text-align: center;
    padding: 10px;
  }
  
  .zone {
    border-top: 12px #CCC solid;
    border-right: 12px #333 solid;
    border-bottom: 12px #666 solid;
    border-left: 12px #999 solid;
  }
  
  .kz {
    width: 50px;
    height: 50px;
    background-color: #FF6;
    font-family: sans-serif;
    font-size: 18pt;
    border-top: 2px #FF6 solid;
    border-left: 2px #FF6 solid;
  }
  
  .murN { border-top: 2px maroon solid; }
  .murW { border-left: 2px maroon solid; }
  .murS { border-bottom: 2px maroon solid; }
  .murE { border-right: 2px maroon solid; }
  .entree { background-color: #F99; }
  .sortie { background-color: #9F9; }
  
  fieldset {
    position: absolute;
    top: 40px;
    left: 40px;
    border: 1px maroon solid;
    padding: 5px;
    background-color: white;
  }
  
  legend {
    border: 1px maroon solid;
    padding: 1px 2px 1px 2px;
    background-color: white;
  }
  
  .invisible { display: none; }
  
  .controle {
    text-align: center;
    margin: 5px;
  }
  
  .vert { background-color: #0F0; }
  .rouge { background-color: #F00; }
  
  </style>
</body>
</html>
